# Setup
c-->from imp import reload
c-->import sparse_matrix
c-->reload(sparse_matrix)
c-->from sparse_matrix import Sparse_Matrix         # For use in repr
c-->from sparse_matrix import Sparse_Matrix as SM   # For use elsewhere
# Test init
c-->m = SM(2, 2)
==-->str(m)-->'2x2:[0  0\n     0  0]'
e-->len(m.matrix)-->0
c-->m = SM(2, 2, (0,0,5), (1,1,5))
==-->str(m)-->'2x2:[5  0\n     0  5]'
e-->len(m.matrix)-->2
c-->m = SM(2, 2, (0,0,5), (1,1,0))
==-->str(m)-->'2x2:[5  0\n     0  0]'
e-->len(m.matrix)-->1
^-->m = SM('a',2)-->AssertionError
^-->m = SM(2,1.5)-->AssertionError
^-->m = SM(0,0)-->AssertionError
^-->m = SM(-1,2)-->AssertionError
^-->m = SM(2,-1)-->AssertionError
^-->m = SM(2,2,(2,0,5))-->AssertionError
^-->m = SM(2,2,(0,0,1),(0,0,1))-->AssertionError
^-->m = SM(2,2,(0,0,1),(0,1,1),(1,0,1),(0,1,1))-->AssertionError
# Test size
c-->m = SM(3, 2)
e-->m.size()-->(3, 2)
c-->m = SM(2, 3)
e-->m.size()-->(2, 3)
c-->m = SM(10, 10)
e-->m.size()-->(10, 10)
# Test len
c-->m = Sparse_Matrix(2, 2)
e-->len(m)-->4
c-->m = Sparse_Matrix(3, 3)
e-->len(m)-->9
# Test repr
c-->m = Sparse_Matrix(3, 3, (0,0,1), (1,1,1), (2,2,1))
# m = Sparse_Matrix(3, 3, (0,0,1), (1,1,1), (2,2,1))
c-->print('        Showing repr (from previous line):',repr(m))
==-->m.rows-->eval(repr(m)).rows
==-->m.cols-->eval(repr(m)).cols
==-->m.matrix-->eval(repr(m)).matrix
c-->m = Sparse_Matrix(3, 2, (0,0,1), (1,0,1), (2,0,1))
# m = Sparse_Matrix(3, 2, (0,0,1), (1,0,1), (2,0,1))
c-->print('        Showing repr (from previous line):',repr(m))
==-->m.rows-->eval(repr(m)).rows
==-->m.cols-->eval(repr(m)).cols
==-->m.matrix-->eval(repr(m)).matrix
# Test iter
c-->m = SM(2, 2, (0,0,1),(0,1,3), (1,0,4), (1,1,2)) 
==-->[v for v in m]-->[(0,0,1), (1,1,2), (0,1,3), (1,0,4)]
c-->m = SM(3, 3, (0,0,5), (1,0,7), (1,1,1), (1,2,6), (2,2,4))
==-->[v for v in m]-->[(1,1,1), (2,2,4), (0,0,5), (1,2,6), (1,0,7)]
c-->m = SM(3, 3)
==-->[v for v in m]-->[]
# Test getitem
c-->m = Sparse_Matrix(3,3, (0,0,0),(0,1,2),(0,2,3),(1,0,4),(1,1,0),(1,2,6),(2,0,7),(2,1,8),(2,2,0))
e-->m[0,0]-->0
e-->m[0,1]-->2
e-->m[0,2]-->3
e-->m[1,0]-->4
e-->m[1,1]-->0
e-->m[1,2]-->6
e-->m[2,0]-->7
e-->m[2,1]-->8
e-->m[2,2]-->0
^-->m[0,0,0]-->TypeError
^-->m['a',0]-->TypeError
^-->m[0,.5]-->TypeError
^-->m[-1,1]-->TypeError
^-->m[1,3]-->TypeError
# Test setitem
c-->m = Sparse_Matrix(3,3, (0,0,0),(0,1,2),(0,2,3),(1,0,4),(1,1,5),(1,2,6),(2,0,7),(2,1,8),(2,2,0))
c-->m[0,1] = 0
c-->m[0,2] = 0
c-->m[1,1] = 5
c-->m[2,2] = 9
e-->m[0,0]-->0
e-->m[0,1]-->0
e-->m[0,2]-->0
e-->m[1,0]-->4
e-->m[1,1]-->5
e-->m[1,2]-->6
e-->m[2,0]-->7
e-->m[2,1]-->8
e-->m[2,2]-->9
e-->len(m.matrix)-->6
^-->m[0,0,0] = 0-->TypeError
^-->m['a',0] = 0-->TypeError
^-->m[0,.5]  = 0-->TypeError
^-->m[-1,1]  = 0-->TypeError
^-->m[1,3]   = 0-->TypeError
# Test +
c-->m1 = SM(2,3, (0,0,1),  (0,1,2), (0,2,3),  (1,0,4), (1,1,5),  (1,2,6))
c-->m2 = SM(2,3, (0,0,-1), (0,1,2), (0,2,-3), (1,0,4), (1,1,-5), (1,2,1))
==-->str(m1+m2)-->'2x3:[0  4  0\n     8  0  7]'
e-->len((m1+m2).matrix)-->3
==-->str(m1+m1)-->'2x3:[ 2   4   6\n      8  10  12]'
==-->str(m1+m1+m1+m1)-->'2x3:[ 4   8  12\n     16  20  24]'
==-->str(1+m1)-->'2x3:[2  3  4\n     5  6  7]'
==-->str(m1+2)-->'2x3:[3  4  5\n     6  7  8]'
c-->m3 = SM(2,2)
^-->m1+m3-->AssertionError
^-->'a'+m1-->TypeError
^-->m1+'a'-->TypeError
# Test eq
c-->m1 = SM(2,2, (0,0,1),(1,1,1))                            # 2 1s, 2 0s
c-->m2 = SM(2,2)                                             # All(4) 0s
c-->m3 = SM(2,2, (0,0,1),(1,1,1))                            # 2 1s, 2 0x (same as m1)
c-->m4 = SM(2,2, (0,0,1), (0,1,1), (1,0,1), (1,1,1))         # All(4) 1s
c-->m5 = SM(1,1)                                             # Al(1) 0s
c-->m6 = SM(1,1 , (0,0,1))                                   # All(1) 1s
e-->m1 == m2-->False
e-->m1 == m3-->True
e-->m1 == m4-->False
e-->m1 == m5-->False
e-->m1 == m6-->False
e-->m1 == 0-->False
e-->m1 == 1-->False
e-->m2 == 0-->True
e-->m3 == 1-->False
e-->m4 == 0-->False
e-->m4 == 1-->True
e-->0 == m1-->False
e-->1 == m1-->False
e-->0 == m2-->True
e-->1 == m3-->False
e-->0 == m4-->False
e-->1 == m4-->True
